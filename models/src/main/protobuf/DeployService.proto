/**
 * The main API is `DeployService`.
 */
syntax = "proto3";
package deploy.v1;

import "CasperMessage.proto";
import "DeployServiceCommon.proto";

// If you are building for other languages "scalapb.proto"
// can be manually obtained here:
// https://raw.githubusercontent.com/scalapb/ScalaPB/master/protobuf/scalapb/scalapb.proto
// make a scalapb directory in this file's location and place it inside

import "scalapb/scalapb.proto";
import "Either.proto";

option java_package = "coop.rchain.casper.protocol";

option (scalapb.options) = {
  package_name: "coop.rchain.casper.protocol"
  flat_package: true
  single_file: true
};

// Use `DoDeploy` to queue deployments of Rholang code and then
// `ProposeService.propose` to make a new block with the results of running them
// all.
//
// To get results back, use `listenForDataAtName`.
service DeployService {
  // Queue deployment of Rholang code (or fail to parse).
  // Returns on success DeployServiceResponse
  rpc DoDeploy(DeployData) returns (Either) {}
  // Get details about a particular block.
  // Returns on success BlockQueryResponse
  rpc getBlock(BlockQuery) returns (Either) {}
  // Get dag
  // Returns on success VisualizeBlocksResponse
  rpc visualizeDag(VisualizeDagQuery) returns (stream Either) {}
  rpc machineVerifiableDag(MachineVerifyQuery) returns (Either) {}
  // Returns on success LightBlockInfo
  rpc showMainChain(BlocksQuery) returns (stream Either) {}
  // Get a summary of blocks on the blockchain.
  // Returns on success LightBlockInfo
  rpc getBlocks(BlocksQuery) returns (stream Either) {}
  // Find data sent to a name.
  // Returns on success ListeningNameDataResponse
  rpc listenForDataAtName(DataAtNameQuery) returns (Either) {}
  // Find processes receiving on a name.
  // Returns on success ListeningNameContinuationResponse
  rpc listenForContinuationAtName(ContinuationAtNameQuery) returns (Either) {}
  // Find block containing a deploy.
  // Returns on success LightBlockQueryResponse
  rpc findDeploy(FindDeployQuery) returns (Either) {}
  // Preview new top-level unforgeable names (for example, to compute signatures over them).
  // Returns on success PrivateNamePreviewResponse
  rpc previewPrivateNames(PrivateNamePreviewQuery) returns (Either) {}
  // Get details about the last finalized block.
  // Returns on success LastFinalizedBlockResponse
  rpc lastFinalizedBlock(LastFinalizedBlockQuery) returns (Either) {}
  // Check if a given block is finalized.
  // Returns on success IsFinalizedResponse
  rpc isFinalized(IsFinalizedQuery) returns (Either) {}
}

message DeployServiceResponse {
  string message = 1;
}

message BlockQueryResponse {
  BlockInfo blockInfo = 1;
}

message LightBlockQueryResponse {
  LightBlockInfo blockInfo = 1;
}

message VisualizeBlocksResponse {
  string content = 1;
}

message MachineVerifyResponse {
  string content = 1;
}

message ListeningNameDataResponse {
  repeated DataWithBlockInfo blockResults = 1;
  int32 length = 2;
}

message ListeningNameContinuationResponse {
  repeated ContinuationsWithBlockInfo blockResults = 1;
  int32 length = 2;
}

message PrivateNamePreviewResponse {
  repeated bytes ids  = 1; // a la GPrivate
}

message LastFinalizedBlockResponse {
  BlockInfo blockInfo = 1;
}

message IsFinalizedResponse {
  bool isFinalized = 1;
}

// This type holds response types inside Either for DeployService methods
message DeployServiceResponseMeta {
  DeployServiceResponse DoDeploy = 1;
  BlockQueryResponse getBlock = 2;
  VisualizeBlocksResponse visualizeDag = 3;
  LightBlockInfo showMainChain = 4;
  LightBlockInfo getBlocks = 5;
  ListeningNameDataResponse listenForDataAtName = 6;
  ListeningNameContinuationResponse listenForContinuationAtName = 7;
  LightBlockQueryResponse findDeploy = 8;
  PrivateNamePreviewResponse previewPrivateNames = 9;
  BlockQueryResponse lastFinalizedBlock = 10;
}
